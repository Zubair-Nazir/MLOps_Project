# -*- coding: utf-8 -*-
"""MLOps.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19JdnlhAif-dFInSEwBHsx-XZZRMcFsKI
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data=pd.read_csv("/content/ai4i2020.csv")

data.head(5)

data.info()

data.drop(columns=["UDI","Product ID","TWF","HDF","PWF","OSF","RNF"],inplace=True)

data.info()

data.head(10)

data["Type"].unique()

df_one_hot = pd.get_dummies(data, columns=['Type'], prefix='Type')

numerical_columns = ['Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]','Torque [Nm]','Tool wear [min]']

# Initialize the StandardScaler
scaler = StandardScaler()

# Fit and transform the selected columns
df_one_hot[numerical_columns] = scaler.fit_transform(df_one_hot[numerical_columns])

df_one_hot.head(10)

X = df_one_hot.drop('Machine failure', axis=1)
y =df_one_hot['Machine failure']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Display the shapes of the resulting sets
print("Training set shape:", X_train.shape, y_train.shape)
print("Testing set shape:", X_test.shape, y_test.shape)

model = LogisticRegression(random_state=42)

model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the performance of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy on the test set: {accuracy:.2f}")

# Additional evaluation metrics
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

import pickle

with open('trained_model.pkl', 'wb') as file:
    pickle.dump(model, file)

